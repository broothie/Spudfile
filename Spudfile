require_relative './env'

# Build
local do |version = get_version|
  invoke :build
  invoke :install, version
end

build '**/*.rb' => '*.gem' do
  sh 'gem build spud.gemspec'
end

install 'spud.gemspec' => `which spud` do |version|
  sh "gem install #{dotgem(version)}"
end

push do |otp, version = get_version|
  sh "gem push --otp #{otp} #{dotgem(version)}"
end

# Publish
publish do |otp, version = get_version|
  invoke :local
  invoke :push, otp, version
  invoke :clean
end

clean do
  sh? 'rm -rf *.gem'
  sh? 'rm file'
end

# Version
version do
  puts get_version
end

bump do |seg = 'patch'|
  old = get_version
  new = vbump(old, seg)
  set_version(new)
  puts "bumped from #{old} to #{new}"
end

# Git
git do |message|
  invoke :clean
  sh 'git add -A'
  sh "git commit -m '#{message}'"
  sh 'git push'
end

# Sandbox
server do
  puts Env::THINGS
end

# Helpers
def vbump(version, segment = 'patch')
  major, minor, patch = version.split('.')

  case segment
  when 'major' then [major.to_i + 1, minor, patch].join('.')
  when 'minor' then [major, minor.to_i + 1, patch].join('.')
  else              [major, minor, patch.to_i + 1].join('.')
  end
end

def dotgem(version)
  "spud-#{version}.gem"
end

VERSION_MATCHER = /\d+\.\d+\.\d+/
def get_version
  File.read('lib/version.rb').match(VERSION_MATCHER).to_s
end

def set_version(version)
  File.write('lib/version.rb', File.read('lib/version.rb').gsub(VERSION_MATCHER, version))
end
